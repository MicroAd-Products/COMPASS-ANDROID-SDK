plugins {
    alias(libs.plugins.android.library)
    id("maven-publish")
    id("cl.franciscosolis.sonatype-central-upload") version "1.0.2"
    id("signing")
}

android {
    namespace 'jp.microad.compassandroidsdk'
    compileSdk 35

    defaultConfig {
        minSdk 21

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
}

android.libraryVariants.all { variant ->
    if (variant.buildType.name == "release") {
        variant.outputs.all { output ->
            output.outputFileName = "${rootProject.name.toLowerCase()}-${project.version}.aar"
        }
    }
}

dependencies {
    implementation libs.adsidentifier
    testImplementation libs.junit
    coreLibraryDesugaring libs.desugar.jdk.libs
}

task javadocEmptyJar(type: Jar) {
    archiveClassifier = 'javadoc'
}

afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group as String
                artifactId = rootProject.name.toLowerCase()
                version = project.version as String
                from(components["release"])
                artifact(tasks["javadocEmptyJar"])

                pom {
                    packaging = "aar"
                    name = "COMPASS Android SDK"
                    description = "COMPASS Android SDK is an Android framework developed and maintained by MicroAd, Inc. for displaying advertisements in native applications."
                    url = "https://github.com/MicroAd-Products/COMPASS-ANDROID-SDK"
                    licenses {
                        license {
                            name = "COMPASS Android SDK License"
                            url = "https://github.com/MicroAd-Products/COMPASS-ANDROID-SDK/blob/main/LICENSE.md"
                        }
                    }
                    developers {
                        developer {
                            id = "microad.co.jp"
                            name = "microad"
                            email = "sys-dev-google@microad.co.jp"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/MicroAd-Products/COMPASS-ANDROID-SDK.git"
                        developerConnection = "scm:git:ssh://github.com/MicroAd-Products/COMPASS-ANDROID-SDK.git"
                        url = "https://github.com/MicroAd-Products/COMPASS-ANDROID-SDK"
                    }
                }
            }
        }
        repositories {
            maven {
                url = uri(layout.buildDirectory.dir("repos"))
            }
        }
    }
    sonatypeCentralUpload {
        dependsOn(tasks.generatePomFileForMavenPublication)
        archives = files("$buildDir/outputs/aar/${rootProject.name.toLowerCase()}-${project.version}.aar")
        username = project.findProperty("ossrhUsername") ?: ""
        password = project.findProperty("ossrhPassword") ?: ""
        pom = tasks.generatePomFileForMavenPublication.outputs.files.singleFile

        signingKey = System.getenv("PGP_SIGNING_KEY")
        signingKeyPassphrase = System.getenv("PGP_SIGNING_KEY_PASSPHRASE")
    }
    signing {
        def signingKey = System.getenv("PGP_SIGNING_KEY")
        def signingPassword = System.getenv("PGP_SIGNING_KEY_PASSPHRASE")
        if (signingKey && signingPassword) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        } else {
            throw new GradleException("PGP_SIGNING_KEY and PGP_SIGNING_KEY_PASSPHRASE must be set")
        }
        required = true
        sign(publishing.publications["maven"])
    }
}
